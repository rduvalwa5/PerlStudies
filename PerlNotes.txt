https://perldoc.perl.org/functions


https://www.tutorialspoint.com/perl/perl_environment.htm

Running Perl
The following are the different ways to start Perl.
Interactive Interpreter
You can enter perl and start coding right away in the interactive interpreter by starting it from the command line. You can do this from Unix, DOS, or any other system, which provides you a command-line interpreter or shell window.

$perl  -e <perl code>           # Unix/Linux
or 
C:>perl -e <perl code>          # Windows/DOS
Here is the list of all the available command line options −

Sr.No.	Option & Description
1	-d[:debugger] 	Runs program under debugger
2	-Idirectory		Specifies @INC/#include directory
3	-T				Enables tainting checks
5	-U				Allows unsafe operations
6	-w				Enables many useful warnings
7	-W				Enables all warnings
8	-X				Disables all warnings
9	-e 				program  Runs Perl script sent in as program
10	file			Runs Perl script from a given file

Script from the Command-line
A Perl script is a text file, which keeps perl code in it and it can be executed at the command 
line by invoking the interpreter on your application, as in the following −

$perl  script.pl          # Unix/Linux
or 
C:>perl script.pl         # Windows/DOS

-------------------------------------------------------
Integrated Development Environment
  You can run Perl from a graphical user interface (GUI) environment as well. All you need is a GUI 
application on your system that supports Perl. You can download Padre, the Perl IDE. 
You can also use Eclipse Plugin EPIC - Perl Editor and IDE for Eclipse if you are familiar 
with Eclipse.
  Before proceeding to the next chapter, make sure your environment is properly setup and working 
perfectly fine. If you are not able to setup the environment properly then you can take help from
your system admininstrator.
  All the examples given in subsequent chapters have been executed with v5.16.2 version available 
on the CentOS flavor of Linux.

-------------------------------------------------------
Perl - Syntax Overview
  Perl borrows syntax and concepts from many languages: awk, sed, C, Bourne Shell, Smalltalk, Lisp 
and even English. However, there are some definite differences between the languages. This chapter 
is designd to quickly get you up to speed on the syntax that is expected in Perl.
  A Perl program consists of a sequence of declarations and statements, which run from the top to 
the bottom. Loops, subroutines, and other control structures allow you to jump around within the 
code. Every simple statement must end with a semicolon (;).
Perl is a free-form language: you can format and indent it however you like. Whitespace serves 
mostly to separate tokens, unlike languages like Python where it is an important part of the syntax, 
or Fortran where it is immaterial.

-------------------------------------------------------
First Perl Program
Interactive Mode Programming
  You can use Perl interpreter with -e option at command line, which lets you execute Perl 
statements from the command line. Let's try something at $ prompt as follows −

$perl -e 'print "Hello World\n"'
	This execution will produce the following result −

	Hello, world

OSXAir:BasicStudies rduvalwa2$ perl -e 'print "Hello World\n"'
Hello World
OSXAir:BasicStudies rduvalwa2$ 
	
-------------------------------------------------------
Script Mode Programming
  Assuming you are already on $ prompt, let's open a text file hello.pl using vi or vim editor and 
put the following lines inside your file.

#!/usr/bin/perl

# This will print "Hello, World"
print "Hello, world\n";

Here /usr/bin/perl is actual the perl interpreter binary. Before you execute your script, 
be sure to change the mode of the script file and give execution priviledge, generally a setting 
of 0755 works perfectly and finally you execute the above script as follows −

$chmod 0755 hello.pl
$./hello.pl
This execution will produce the following result −

Hello, world

You can use parentheses for functions arguments or omit them according to your personal taste. 
They are only required occasionally to clarify the issues of precedence. Following two statements produce the same result.

print("Hello, world\n");
print "Hello, world\n";

-------------------------------------------------------
Perl File Extension

  A Perl script can be created inside of any normal simple-text editor program. There are several 
programs available for every type of platform. There are many programs designd for programmers 
available for download on the web.
  As a Perl convention, a Perl file must be saved with a .pl or .PL file extension in order to be 
recognized as a functioning Perl script. File names can contain numbers, symbols, and letters but 
must not contain a space. Use an underscore (_) in places of spaces.

-------------------------------------------------------
Comments in Perl

  Comments in any programming language are friends of developers. Comments can be used to make 
program user friendly and they are simply skipped by the interpreter without impacting the code 
functionality. For example, in the above program, a line starting with hash # is a comment.
  Simply saying comments in Perl start with a hash symbol and run to the end of the line −
# This is a comment in perl
Lines starting with = are interpreted as the start of a section of embedded documentation (pod), 
and all subsequent lines until the next =cut are ignored by the compiler. 
Following is the example −
#!/usr/bin/perl

# This is a single line comment
print "Hello, world\n";

=begin comment
This is all part of multiline comment.
You can use as many lines as you like
These comments will be ignored by the 
compiler until the next =cut is encountered.
=cut

-------------------------------------------------------
Whitespaces in Perl

  A Perl program does not care about whitespaces. Following program works perfectly fine −

#!/usr/bin/perl

print       "Hello, world\n";

But if spaces are inside the quoted strings, then they would be printed as is. For example −

#!/usr/bin/perl
# This would print with a line break in the middle
print "Hello
          world\n";
This will produce the following result −

Hello
          world
          
All types of whitespace like spaces, tabs, newlines, etc. are equivalent for the interpreter when 
they are used outside of the quotes. A line containing only whitespace, possibly with a comment, 
is known as a blank line, and Perl totally ignores it.

-------------------------------------------------------
Single and Double Quotes in Perl

You can use double quotes or single quotes around literal strings as follows −

#!/usr/bin/perl

print "Hello, world\n";
print 'Hello, world\n';
This will produce the following result −

Hello, world
Hello, world\n$

There is an important difference in single and double quotes. Only double quotes interpolate 
variables and special characters such as newlines \n, whereas single quote does not interpolate 
any variable or special character. Check below example where we are using $a as a variable to store
a value and later printing that value −

\#!/usr/bin/perl

$a = 10;
print "Value of a = $a\n";
print 'Value of a = $a\n';
This will produce the following result −

Value of a = 10
Value of a = $a\n$

-------------------------------------------------------
"Here" Documents

You can store or print multiline text with a great comfort. Even you can make use of variables 
inside the "here" document. Below is a simple syntax, check carefully there must be no space 
between the << and the identifier.

An identifier may be either a bare word or some quoted text like we used EOF below. If identifier 
is quoted, the type of quote you use determines the treatment of the text inside the here docoment, 
just as in regular quoting. An unquoted identifier works like double quotes.

#!/usr/bin/perl

$a = 10;
$var = <<"EOF";
This is the syntax for here document and it will continue
until it encounters a EOF in the first line.
This is case of double quote so variable value will be 
interpolated. For example value of a = $a
EOF
print "$var\n";

$var = <<'EOF';
This is case of single quote so variable value will be 
interpolated. For example value of a = $a
EOF
print "$var\n";

This will produce the following result −

This is the syntax for here document and it will continue
until it encounters a EOF in the first line.
This is case of double quote so variable value will be
interpolated. For example value of a = 10

This is case of single quote so variable value will be
interpolated. For example value of a = $a

-------------------------------------------------------
Escaping Characters

  Perl uses the backslash (\) character to escape any type of character that might interfere with 
  our code. Let's take one example where we want to print double quote and $ sign −

#!/usr/bin/perl

$result = "This is \"number\"";
print "$result\n";
print "\$result\n";
This will produce the following result −

This is "number"
$result

-------------------------------------------------------
Perl Identifiers

  A Perl identifier is a name used to identify a variable, function, class, module, or other object.
A Perl variable name starts with either $, @ or % followed by zero or more letters, underscores, 
and digits (0 to 9).

  Perl does not allow punctuation characters such as @, $, and % within identifiers. 
 Perl is a case sensitive programming language. Thus $Manpower and $manpower are two different 
 identifiers in Perl.
 
 -------------------------------------------------------
 Perl - Data Types
 -------------------------------------------------------
   Perl is a loosely typed language and there is no need to specify a type for your 
 data while using in your program. The Perl interpreter will choose the type based on the 
 context of the data itself.

  Perl has three basic data types: scalars, arrays of scalars, and hashes of scalars, also 
known as associative arrays. Here is a little detail about these data types.

Sr.No.	Types & Description
1		Scalar
		Scalars are simple variables. They are preceded by a dollar sign ($). 
		A scalar is either a number, a string, or a reference. 
		A reference is actually an address of a variable, which we will see in the upcoming 
		chapters.

2		Arrays
		Arrays are ordered lists of scalars that you access with a numeric index, 
		which starts with 0. They are preceded by an "at" sign (@).

3		Hashes
		Hashes are unordered sets of key/value pairs that you access using the keys as 
		subscripts. They are preceded by a percent sign (%).
		
-------------------------------------------------------
Numeric Literals

  Perl stores all the numbers internally as either signed integers or double-precision 
  floating-point values. Numeric literals are specified in any of the following 
  floating-point or integer formats

Type					Value
Integer				1234
Negative integer		-100
Floating point		2000
Scientific notation	16.12E14
Hexadecimal			0xffff
Octal				0577
 
-------------------------------------------------------
String Literals

 Strings are sequences of characters. They are usually alphanumeric values delimited by either
single (') or double (") quotes. They work much like UNIX shell quotes where you can use 
single quoted strings and double quoted strings.

 Double-quoted string literals allow variable interpolation, and single-quoted strings are not.
There are certain characters when they are proceeded by a back slash, have special meaning 
and they are used to represent like newline (\n) or tab (\t).

You can embed newlines or any of the following Escape sequences directly in your double 
quoted strings −

Escape sequence				Meaning
\\							Backslash
\'							Single quote
\"							Double quote
\a							Alert or bell
\b							Backspace
\f							Form feed
\n							Newline
\r							Carriage return
\t							Horizontal tab
\v							Vertical tab
\0nn							Creates Octal formatted numbers
\xnn							Creates Hexideciamal formatted numbers
\cX							Controls characters, x may be any character
\u							Forces next character to uppercase
\l							Forces next character to lowercase
\U							Forces all following characters to uppercase
\L							Forces all following characters to lowercase
\Q							Backslash all following non-alphanumeric characters
\E							End \U, \L, or \Q

Example
  Let's see again how strings behave with single quotation and double quotation. 
  Here we will use string escapes mentioned in the above table and will make use of the 
  scalar variable to assign string values.

#!/usr/bin/perl

# This is case of interpolation.
$str = "Welcome to \ntutorialspoint.com!";
print "$str\n";

# This is case of non-interpolation.
$str = 'Welcome to \ntutorialspoint.com!';
print "$str\n";

# Only W will become upper case.
$str = "\uwelcome to tutorialspoint.com!";
print "$str\n";

# Whole line will become capital.
$str = "\UWelcome to tutorialspoint.com!";
print "$str\n";

# A portion of line will become capital.
$str = "Welcome to \Ututorialspoint\E.com!"; 
print "$str\n";

# Backsalash non alpha-numeric including spaces.
$str = "\QWelcome to tutorialspoint's family";
print "$str\n";
This will produce the following result −

Welcome to
tutorialspoint.com!
Welcome to \ntutorialspoint.com!
Welcome to tutorialspoint.com!
WELCOME TO TUTORIALSPOINT.COM!
Welcome to TUTORIALSPOINT.com!
Welcome\ to\ tutorialspoint\'s\ family

-------------------------------------------------------
Perl - Variables
-------------------------------------------------------

  Variables are the reserved memory locations to store values. This means that when you 
create a variable you reserve some space in memory.
  Based on the data type of a variable, the interpreter allocates memory and decides what 
can be stored in the reserved memory. Therefore, by assigning different data types to variables,
you can store integers, decimals, or strings in these variables.
  We have learned that Perl has the following three basic data types −
		Scalars
		Arrays
		Hashes
  Accordingly, we are going to use three types of variables in Perl. A scalar variable will 
precede by a dollar sign ($) and it can store either a number, a string, or a reference. 
An array variable will precede by sign @ and it will store ordered lists of scalars. Finally,
the Hash variable will precede by sign % and will be used to store sets of key/value pairs.

  Perl maintains every variable type in a separate name space. So you can, without fear of 
  conflict, use the same name for a scalar variable, an array, or a hash. 
  This means that $foo and @foo are two different variables.

-------------------------------------------------------
Creating Variables

  Perl variables do not have to be explicitly declared to reserve memory space. 
The declaration happens automatically when you assign a value to a variable. The equal sign 
(=) is used to assign values to variables.

  Keep a note that this is mandatory to declare a variable before we use it if we use use 
strict statement in our program.

 The operand to the left of the = operator is the name of the variable, and the operand to 
the right of the = operator is the value stored in the variable. For example −

$age = 25;             # An integer assignment
$name = "John Paul";   # A string 
$salary = 1445.50;     # A floating point

 Here 25, "John Paul" and 1445.50 are the values assigned to $age, $name and $salary variables,
respectively. Shortly we will see how we can assign values to arrays and hashes.

-------------------------------------------------------
Scalar Variables

  A scalar is a single unit of data. That data might be an integer number, floating point, 
a character, a string, a paragraph, or an entire web page. Simply saying it could be anything
, but only a single thing.

  Here is a simple example of using scalar variables −

#!/usr/bin/perl

$age = 25;             # An integer assignment
$name = "John Paul";   # A string 
$salary = 1445.50;     # A floating point

print "Age = $age\n";
print "Name = $name\n";
print "Salary = $salary\n";
This will produce the following result −

Age = 25
Name = John Paul
Salary = 1445.5

-------------------------------------------------------
Array Variables

  An array is a variable that stores an ordered list of scalar values. Array variables are 
preceded by an "at" (@) sign. To refer to a single element of an array, you will use the 
dollar sign ($) with the variable name followed by the index of the element in square brackets.

Here is a simple example of using array variables −

#!/usr/bin/perl

@ages = (25, 30, 40);             
@names = ("John Paul", "Lisa", "Kumar");

print "\$ages[0] = $ages[0]\n";
print "\$ages[1] = $ages[1]\n";
print "\$ages[2] = $ages[2]\n";
print "\$names[0] = $names[0]\n";
print "\$names[1] = $names[1]\n";
print "\$names[2] = $names[2]\n";
Here we used escape sign (\) before the $ sign just to print it. Other Perl will understand it as a variable and will print its value. When executed, this will produce the following result −

$ages[0] = 25
$ages[1] = 30
$ages[2] = 40
$names[0] = John Paul
$names[1] = Lisa
$names[2] = Kumar
